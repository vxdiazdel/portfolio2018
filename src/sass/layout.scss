.page--home {
  background-color: map-get($colors, "dark-blue");
  @include transition(background-color);
  &.work-active {
    background-color: map-get($colors, "blue");
    .section--work {
      .section__counter {
        color: map-get($colors, "dark-blue");
      }
    }
  }
  &.contact-active {
    background-color: map-get($colors, "grey");
    .section--contact {
      .grid__header {
        color: map-get($colors, "blue");
      }
    }
  }
  // Page loaded animations
  &.loaded {
    .bg-grid__line {
      transform: scaleY(1);
    }
    .hero {
      h1, h2, h3 {
        opacity: 1;
      }
    }
  }
  .bg-grid {
    position: fixed;
    top: 0;
    left: 0;
    height: 100%;
    width: 100%;
    display: grid;
    grid-template-columns: 25px repeat(2, 1fr) 25px;
    grid-template-rows: 100%;
    opacity: 0.2;
    z-index: -1;
    &__line {
      transform-origin: top;
      transform: scaleY(0);
      transition: $transition-speed * 2;
      @for $i from 1 through 6 {
        &:nth-child(#{$i}) {
          transition-delay: #{$i * .1}s;
        }
      }
      &:not(:first-child) {
        border-left: 1px solid #fff;
      }
      &:not(.line--sm) {
        display: none;
      }
    }
    @media (min-width: 980px) {
      grid-template-columns: repeat(6, 1fr);
      :not(.line--sm) {
        display: block;
      }
    }
  }
  .hero {
    min-height: 100vh;
    padding: 20px;
    position: relative;
    display: flex;
    flex-direction: column;
    justify-content: center;
    z-index: 1;
    h1, h2, h3 {
      position: relative !important;
      opacity: 0;
      @include transition(opacity, $transition-speed * 3);
      transition-delay: $transition-speed * 1.5;
    }
    h1, h2 {
      color: map-get($colors, "blue");
    }
    h1 {
      font-size: calc(20vw + 20px);
      line-height: 1.25;
    }
    h2 {
      font-size: calc(17vw);
      line-height: 0.75;
    }
    h3 {
      color: map-get($colors, "green");
      font-family: 'Noto Sans', sans-serif;
      font-size: calc(1vw + 12px);
      text-align: right;
    }
  }
  .section {
    position: relative;
    @include transition(background-color);
    padding: 100px 0;
    @media (min-width: 980px) {
      padding: 200px 0;
    }
    &__header {
      font-family: 'Noto Sans', sans-serif;
      color: map-get($colors, "white");
      font-size: calc(10vw + 24px);
      position: relative;
      line-height: 1;
      display: block;
      .header__text {
        display: block;
      }
    }
    &__counter {
      position: absolute;
      top: -75%;
      left: -10%;
      opacity: 0.15;
      font-size: calc(26vw + 24px);
      line-height: 0;
      z-index: -1;
      user-select: none;
      @media (min-width: 768px) {
        top: -10%;
      }
    }
    &__content {
      grid-column-start: 3;
      grid-column-end: -2;
    }
  }
  .section--about {
    .section__content {
      color: map-get($colors, "white");
      font-size: calc(3vw + 12px);
    }
    .text-design {
      font-family: cursive;
    }
    .text-develop {
      font-family: 'Courier New', Courier, monospace;
    }
  }
  .section--work {
    .grid__item {
      &:not(:first-child) {
        margin-top: 100px;
        @media (min-width: 980px) {
          margin-top: 200px;
        }
      }
    }
    .reveal {
      opacity: 0;
      visibility: hidden;
      transform: translateY(10px);
      transition: #{$transition-speed * 2};
      &.is-visible {
        opacity: 1;
        visibility: visible;
        transform: translateY(0);        
      }
      img {
        box-shadow: $shadow-z-5;
        border-radius: $border-radius;
        transition: .5s;
      }
      @media (min-width: 980px) {
        .mopro {
          height: 500px;
        }
        .pixel-motion {
          height: 370px;
        }
        .lolcryptos {
          height: 450px;
        }
      }
    }
    .work-item {
      position: relative;
      transition: .5s;
      overflow: hidden;
      &:hover {
        img {
          transform: scale(1.1);
        }
        .work-item__info {
          opacity: 1;
        }
      }
      &__info {
        @include absolute-fill;
        background: rgba(map-get($colors, "dark-blue"), 0.85);
        color: map-get($colors, "white");
        display: flex;
        justify-content: center;
        align-items: center;
        flex-direction: column;
        opacity: 0;
        border-radius: $border-radius;
        @include transition(opacity);
        h4, h5, p {
          font-family: 'Noto-Sans', sans-serif;
        }
        h4 {
          font-size: calc(3vw + 12px);
          line-height: 1;
          font-weight: 100;
        }
        h5 {
          font-size: calc(2vw + 8px);
          font-weight: 400;
        }
        p {
          font-size: calc(1vw + 6px);
        }
      }
    }
  }
  .section--contact {
    .contact-links {
      grid-column-start: 3;
      grid-column-end: -1;
    }
    .link {
      display: block;
      font-size: calc(8vw + 12px);
      text-decoration: none;
      color: map-get($colors, "dark-blue");
      padding: 5px;
      position: relative;
      &:hover {
        &:before {
          animation: glitch 2s infinite linear alternate-reverse;
        }
        &:after {
          animation: glitch-2 1s infinite linear alternate-reverse;
        }
      }
      &:before {
        content: attr(data-text);
        position: absolute;
        left: -1px;
        text-shadow: 2px 0 map-get($colors, "blue");
        top: 0;
        color: inherit;
        overflow: hidden;
        clip: rect(0, 900px, 0, 0);
      }
      &:after {
        content: attr(data-text);
        position: absolute;
        left: 1px;
        text-shadow: -2px 0 map-get($colors, "green");
        top: 0;
        color: inherit;
        overflow: hidden;
        clip: rect(0, 900px, 0, 0);
      }
    }
  }
}

@keyframes glitch {
  $steps: 20;
  @for $i from 0 through $steps {
    #{percentage($i*(1/$steps))} {
      clip: rect(random(100)+px, 9999px, random(100)+px, 0);
    }
  }
}
@keyframes glitch-2 {
  $steps: 20;
  @for $i from 0 through $steps {
    #{percentage($i*(1/$steps))} {
      clip: rect(random(100)+px, 9999px, random(100)+px, 0);
    }
  }
}